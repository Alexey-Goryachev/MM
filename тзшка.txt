1.Бот находится в активном состоянии в вечном цикле.После будет задача через Celery .

2.При первом подключении к бирже БОТ проходит аутентификацию через логин/пароль( или API ключ),  
на вход функция должна получать логин/пароль или API ключ,   и валютную пару в отношениии которой должны проходить торги.

3.Каждые 1 минуту  бот проводит  GET-запрос к API биржи для получение 
    текущих цен(продажа/покупка) актива.

(предварительно реализуем функцию/функции для отправки запроса, возвращаем список  текущих цен(ордеров))

3.Если в полученном списке найдена цена(ордер) продажи  ниже на X значений от требуемой ,  то бот проводит POST-запрос к АPI бирже,  на покупку 
актива по этой заниженной цене и выкупает все активы по этой цене.
Поле покупки складывает купленные активы на свой баланс.

4.Если в полученном списке найдена цена покупки  выше  на X значений от требуемой ,  то бот проводит  POST-запрос к АPI бирже, размещает  
ордер на продажу всего количества актива по этой завышенной цене  цене и продает  все активы.
После  проведения сделки  продажи бот сохраняет полученные средства у себя на балансе.

5.Если цена находится в нужном диапазоне  без изменений, то бот ничего не делает , продолжает находится в рабочем состоянии и каждую 1 минут 
повторяет запрос на проверку текущих цен.

 
Предварительная схема реализации :
1)Разделить на модуля , отдельно  модуль  Bot в нем реализованы класс Вot в котором  реализуем  всю логику  торговли на бирже которую  умеет бот.
Также тут добавить логирование чтобы при каждоцй операции отображался лог. 
2)Отдельно модуль Биржа, в нем реализован  класс Биржа в котором реализована логика взаимодействия с биржей, торговли тут нет.
3)Класс Bot наследуется от класса Биржа
4)Отдельно модуль логирования , в нем реализована функция логирования в файл , и эту функцию нужно будет подключить в модуле main,  где и реализуем запуск бота.
5)Все доступы, логин пароли, api key и прочее, храним в переменных окружения.
 
